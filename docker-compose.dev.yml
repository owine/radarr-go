---
# docker-compose.dev.yml - Full Development Environment
# Complete development stack with all services enabled
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --profile dev

services:
  # Override main app for advanced development features
  radarr-go:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - GO_VERSION=1.25
    container_name: radarr-dev-backend
    ports:
      - "7878:7878"  # Main API
      - "8080:8080"  # Debug/profiling port
    volumes:
      # Full workspace mount with caching
      - .:/workspace
      - go_mod_cache:/go/pkg/mod
      - go_build_cache:/root/.cache/go-build
      - ./data:/data
      - ./movies:/movies
    environment:
      - RADARR_LOG_LEVEL=debug
      - RADARR_DATABASE_TYPE=postgres
      - RADARR_DATABASE_HOST=postgres
      - RADARR_DATABASE_PORT=5432
      - RADARR_DATABASE_USERNAME=radarr_dev
      - RADARR_DATABASE_PASSWORD=dev_password
      - RADARR_DATABASE_NAME=radarr_dev
      - CGO_ENABLED=0
      - GOOS=linux
      - GOARCH=amd64
    working_dir: /workspace
    command: air  # Hot reload
    profiles:
      - dev

  # Development-optimized PostgreSQL
  postgres:
    environment:
      - POSTGRES_DB=radarr_dev
      - POSTGRES_USER=radarr_dev
      - POSTGRES_PASSWORD=dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c log_statement=all
      -c log_min_duration_statement=0
      -c log_connections=on
      -c log_disconnections=on
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
    profiles:
      - dev

  # Development MariaDB (alternative database)
  mariadb:
    environment:
      - MARIADB_DATABASE=radarr_dev
      - MARIADB_USER=radarr_dev
      - MARIADB_PASSWORD=dev_password
      - MARIADB_ROOT_PASSWORD=root_dev_password
    ports:
      - "3306:3306"
    volumes:
      - mariadb_dev_data:/var/lib/mysql
      - ./scripts/mariadb-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --innodb-flush-log-at-trx-commit=2
      --sync-binlog=0
      --general-log=1
      --general-log-file=/var/lib/mysql/general.log
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long_query_time=1
      --max-connections=200
    profiles:
      - dev
      - mariadb

  # Development Redis with enhanced logging
  redis:
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --save 900 1
      --save 300 10
      --save 60 10000
      --loglevel debug
    profiles:
      - dev

  # Enable admin tools for development
  adminer:
    profiles:
      - dev
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

  mailhog:
    profiles:
      - dev

  # Enable monitoring stack for development
  prometheus:
    profiles:
      - dev
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus

  grafana:
    profiles:
      - dev
      - monitoring
    ports:
      - "3001:3000"
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./scripts/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml

  jaeger:
    profiles:
      - dev
      - monitoring

  # Frontend development
  radarr-frontend:
    profiles:
      - dev
      - frontend

# Development-specific volumes
volumes:
  # Override with development data
  postgres_dev_data:
    driver: local
  mariadb_dev_data:
    driver: local

  # Build cache volumes for performance
  go_mod_cache:
    driver: local
  go_build_cache:
    driver: local

  # Development monitoring data
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

# Simplified networking for development
networks:
  app-network:
    name: radarr-dev-network
    driver: bridge

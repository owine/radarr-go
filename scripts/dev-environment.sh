#!/bin/bash
# Enhanced Development Environment Management Script
# Provides comprehensive development environment management for Radarr Go

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
DEV_COMPOSE_FILE="$PROJECT_DIR/docker-compose.dev.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo ""
    echo -e "${CYAN}================================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}================================================${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    local missing_tools=()

    # Check required tools
    command -v docker >/dev/null 2>&1 || missing_tools+=("docker")
    command -v docker-compose >/dev/null 2>&1 || missing_tools+=("docker-compose")
    command -v go >/dev/null 2>&1 || missing_tools+=("go")
    command -v make >/dev/null 2>&1 || missing_tools+=("make")

    if [ ${#missing_tools[@]} -gt 0 ]; then
        print_status $RED "Missing required tools: ${missing_tools[*]}"
        print_status $YELLOW "Run './scripts/dev-setup.sh' to install missing tools"
        return 1
    fi

    # Check Docker daemon
    if ! docker info >/dev/null 2>&1; then
        print_status $RED "Docker daemon is not running"
        print_status $YELLOW "Please start Docker and try again"
        return 1
    fi

    return 0
}

# Function to create development directories
create_dev_directories() {
    print_status $BLUE "Creating development directories..."

    local dirs=(
        "data"
        "movies"
        "tmp"
        "web/static"
        "web/templates"
        "web/frontend/src/components"
        "web/frontend/src/pages"
        "web/frontend/src/hooks"
        "web/frontend/src/services"
        "web/frontend/src/utils"
        "web/frontend/public"
    )

    for dir in "${dirs[@]}"; do
        mkdir -p "$PROJECT_DIR/$dir"
        print_status $GREEN "✓ Created $dir"
    done
}

# Function to setup development configuration
setup_dev_config() {
    if [ ! -f "$PROJECT_DIR/config.yaml" ]; then
        print_status $BLUE "Creating development configuration..."

        # Generate secure credentials
        local dev_password=$(openssl rand -base64 24 | tr -d "=+/" | cut -c1-24 2>/dev/null || echo "dev_password_123")
        local dev_api_key=$(openssl rand -base64 64 | tr -d "=+/" | cut -c1-64 2>/dev/null || echo "dev_api_key_123")

        cat > "$PROJECT_DIR/config.yaml" << EOF
# Development configuration for Radarr Go
# Generated by development environment setup
server:
  port: 7878
  host: "0.0.0.0"
  url_base: ""
  enable_ssl: false

database:
  type: "postgres"
  host: "localhost"
  port: 5432
  username: "radarr_dev"
  password: "\${RADARR_DEV_DB_PASSWORD:-$dev_password}"
  name: "radarr_dev"
  ssl_mode: "disable"
  max_open_connections: 25
  max_idle_connections: 25

log:
  level: "debug"
  format: "json"
  file: ""

auth:
  method: "basic"
  api_key: "\${RADARR_DEV_API_KEY:-$dev_api_key}"

storage:
  data_directory: "./data"
  movies_directory: "./movies"
EOF

        print_status $GREEN "✓ Development configuration created"
        print_status $CYAN "Database Password: $dev_password"
        print_status $CYAN "API Key: $dev_api_key"
    else
        print_status $GREEN "✓ Configuration already exists"
    fi
}

# Function to start development environment
start_environment() {
    local profile=${1:-"default"}

    print_header "Starting Development Environment"

    # Ensure prerequisites
    if ! check_prerequisites; then
        return 1
    fi

    # Create directories and config
    create_dev_directories
    setup_dev_config

    # Build backend development tools
    print_status $BLUE "Setting up Go development tools..."
    cd "$PROJECT_DIR"
    make setup-backend >/dev/null 2>&1 || true

    # Start services based on profile
    case $profile in
        "minimal")
            print_status $BLUE "Starting minimal environment (backend + PostgreSQL)..."
            docker-compose -f "$DEV_COMPOSE_FILE" up -d postgres-dev
            sleep 5
            make dev &
            ;;
        "full"|"default")
            print_status $BLUE "Starting full development environment..."
            docker-compose -f "$DEV_COMPOSE_FILE" --profile monitoring up -d
            ;;
        "mariadb")
            print_status $BLUE "Starting with MariaDB..."
            docker-compose -f "$DEV_COMPOSE_FILE" --profile mariadb --profile monitoring up -d
            ;;
        "frontend")
            print_status $BLUE "Starting with frontend support..."
            docker-compose -f "$DEV_COMPOSE_FILE" --profile frontend --profile monitoring up -d
            ;;
        *)
            print_status $RED "Unknown profile: $profile"
            echo "Available profiles: minimal, full, mariadb, frontend"
            return 1
            ;;
    esac

    # Wait for services to start
    print_status $YELLOW "Waiting for services to start..."
    sleep 10

    # Display service information
    show_service_info
}

# Function to show service information
show_service_info() {
    print_header "Development Services"

    echo -e "${BLUE}🚀 Backend Services:${NC}"
    echo "   • API Server:      http://localhost:7878"
    echo "   • Health Check:    http://localhost:7878/ping"
    echo "   • Debug/Profile:   http://localhost:8080/debug/pprof/"
    echo ""

    echo -e "${BLUE}🗄️  Database Services:${NC}"
    echo "   • Database Admin:  http://localhost:8081"
    echo "   • PostgreSQL:      localhost:5432 (radarr_dev/dev_password)"
    echo "   • MariaDB:         localhost:3306 (radarr_dev/dev_password)"
    echo ""

    echo -e "${BLUE}📊 Monitoring Services:${NC}"
    echo "   • Prometheus:      http://localhost:9090"
    echo "   • Grafana:         http://localhost:3001 (admin/admin)"
    echo "   • Jaeger Tracing:  http://localhost:16686"
    echo "   • Email Testing:   http://localhost:8025"
    echo ""

    echo -e "${BLUE}🎨 Frontend Services (Phase 2):${NC}"
    echo "   • React Dev:       http://localhost:3000"
    echo "   • Storybook:       http://localhost:3001"
    echo ""

    echo -e "${BLUE}🔧 Development Tools:${NC}"
    echo "   • Hot Reload:      'make dev' (in another terminal)"
    echo "   • Monitor:         './scripts/dev-monitor.sh status'"
    echo "   • Logs:            './scripts/dev-monitor.sh logs'"
    echo "   • Tests:           'make test'"
}

# Function to stop environment
stop_environment() {
    local clean=${1:-false}

    print_header "Stopping Development Environment"

    if [ "$clean" = "true" ]; then
        print_status $YELLOW "Stopping and cleaning all services..."
        docker-compose -f "$DEV_COMPOSE_FILE" down -v --remove-orphans
        make test-db-clean >/dev/null 2>&1 || true
        print_status $GREEN "✓ Environment stopped and cleaned"
    else
        print_status $YELLOW "Stopping services..."
        docker-compose -f "$DEV_COMPOSE_FILE" down
        print_status $GREEN "✓ Environment stopped"
    fi
}

# Function to restart environment
restart_environment() {
    local profile=${1:-"default"}

    print_header "Restarting Development Environment"

    print_status $YELLOW "Stopping current environment..."
    stop_environment

    sleep 2

    print_status $BLUE "Starting environment with profile: $profile"
    start_environment "$profile"
}

# Function to run development tests
run_tests() {
    print_header "Running Development Tests"

    cd "$PROJECT_DIR"

    # Ensure test databases are running
    print_status $BLUE "Starting test databases..."
    make test-db-up

    # Run tests
    print_status $BLUE "Running comprehensive test suite..."

    if make test-unit; then
        print_status $GREEN "✓ Unit tests passed"
    else
        print_status $RED "✗ Unit tests failed"
        return 1
    fi

    if make test; then
        print_status $GREEN "✓ Integration tests passed"
    else
        print_status $RED "✗ Integration tests failed"
        return 1
    fi

    if make test-bench; then
        print_status $GREEN "✓ Benchmark tests completed"
    else
        print_status $YELLOW "⚠ Benchmark tests had issues"
    fi

    print_status $GREEN "✅ All tests completed successfully"
}

# Function to show status
show_status() {
    print_header "Development Environment Status"

    # Use the monitoring script for detailed status
    if [ -x "$SCRIPT_DIR/dev-monitor.sh" ]; then
        "$SCRIPT_DIR/dev-monitor.sh" status
    else
        # Fallback status check
        if docker ps --filter "name=radarr-dev-" --format "table {{.Names}}\t{{.Status}}" | grep -q "radarr-dev-"; then
            print_status $GREEN "✓ Development environment is running"
            docker ps --filter "name=radarr-dev-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        else
            print_status $YELLOW "Development environment is not running"
        fi
    fi
}

# Function to show help
show_help() {
    print_header "Development Environment Manager"

    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start [profile]    - Start development environment"
    echo "  stop [--clean]     - Stop development environment"
    echo "  restart [profile]  - Restart development environment"
    echo "  status            - Show environment status"
    echo "  test              - Run development tests"
    echo "  info              - Show service information"
    echo "  help              - Show this help"
    echo ""
    echo "Profiles:"
    echo "  minimal           - Backend + PostgreSQL only"
    echo "  full (default)    - Complete environment with monitoring"
    echo "  mariadb           - Use MariaDB instead of PostgreSQL"
    echo "  frontend          - Include frontend development server"
    echo ""
    echo "Examples:"
    echo "  $0 start              # Start full environment"
    echo "  $0 start minimal      # Start minimal environment"
    echo "  $0 stop --clean       # Stop and clean all data"
    echo "  $0 restart mariadb    # Restart with MariaDB"
    echo ""
    echo "Quick Commands:"
    echo "  make dev-full         # Same as: $0 start full"
    echo "  make dev              # Start backend with hot reload only"
    echo "  ./scripts/dev-monitor.sh    # Monitoring and debugging tools"
}

# Main script logic
case "${1:-help}" in
    "start")
        start_environment "${2:-default}"
        ;;
    "stop")
        if [ "$2" = "--clean" ]; then
            stop_environment true
        else
            stop_environment false
        fi
        ;;
    "restart")
        restart_environment "${2:-default}"
        ;;
    "status")
        show_status
        ;;
    "test")
        run_tests
        ;;
    "info")
        show_service_info
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        print_status $RED "Unknown command: $1"
        show_help
        exit 1
        ;;
esac

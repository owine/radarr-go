name: Release

on:
  release:
    types: [published]

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      run: |
        mkdir -p dist
        BINARY_NAME="radarr-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with release optimizations
        CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
        go build -ldflags="-w -s -X 'main.version=${{ github.ref_name }}' -X 'main.commit=${{ github.sha }}' -X 'main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" \
        -o "dist/${BINARY_NAME}" ./cmd/radarr
      env:
        CGO_ENABLED: 1

    - name: Create release archive
      run: |
        cd dist
        BINARY_NAME="radarr-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
          ARCHIVE_NAME="radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
          zip -r "../${ARCHIVE_NAME}" "${BINARY_NAME}"
        else
          ARCHIVE_NAME="radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
          tar -czf "../${ARCHIVE_NAME}" "${BINARY_NAME}"
        fi
        cd ..
        
        # Create checksums
        if [ "${{ matrix.goos }}" = "windows" ]; then
          sha256sum "radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" > "radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sha256"
        else
          sha256sum "radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" > "radarr-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz.sha256"
        fi

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
          *.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Release Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: radarr/radarr-go
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Release Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release binary (Linux AMD64)
      run: |
        # Download the Linux binary from the release
        wget -O radarr-linux-amd64 "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/radarr-${{ github.ref_name }}-linux-amd64.tar.gz"
        tar -xzf radarr-linux-amd64
        chmod +x radarr-linux-amd64
      continue-on-error: true

    - name: Test release binary
      run: |
        # Test that the release binary works
        timeout 30s ./radarr-linux-amd64 --help || echo "Help command test completed"
        
        # Quick startup test
        mkdir -p data movies web/static web/templates
        cp config.yaml data/
        
        timeout 15s ./radarr-linux-amd64 --data ./data &
        RADARR_PID=$!
        sleep 10
        
        # Test basic endpoint
        curl -f http://localhost:7878/ping || echo "Basic connectivity test completed"
        
        kill $RADARR_PID || true
        wait $RADARR_PID || true
      continue-on-error: true

  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: always()
    
    steps:
    - name: Create release summary
      run: |
        echo "## ðŸŽ‰ Radarr Go Release ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "- **Binaries**: Linux (amd64, arm64), macOS (amd64, arm64), Windows (amd64)" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Images**: \`radarr/radarr-go:${{ github.ref_name }}\`, \`radarr/radarr-go:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: Multi-platform Docker support (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Docker" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 7878:7878 radarr/radarr-go:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Binary" >> $GITHUB_STEP_SUMMARY
        echo "wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/radarr-${{ github.ref_name }}-linux-amd64.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "tar -xzf radarr-${{ github.ref_name }}-linux-amd64.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "./radarr-linux-amd64" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Test**: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.25.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quality checks and build (optimized for cost and speed)
  quality-and-build:
    name: Quality & Build
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      actions: read
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Set up Go with enhanced caching
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5  # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      # Enhanced dependency caching
      - name: Cache Go modules and tools
        id: cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: >
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            ${{ env.GO_VERSION }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            go-${{ runner.os }}-

      - name: Install dependencies and tools
        run: |
          go mod download
          go work sync
          # Install tools in parallel
          go install github.com/securego/gosec/v2/cmd/gosec@latest &
          go install golang.org/x/vuln/cmd/govulncheck@latest &
          wait

      # Combined linting and security in parallel steps
      - name: Run golangci-lint
        uses: >
          golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9  # v8.0.0
        with:
          version: latest
          args: --timeout=5m
          # Use existing cache from setup-go
          skip-cache: true

      - name: Run security checks in parallel
        run: |
          # Run security checks in background
          gosec -fmt sarif -out gosec.sarif ./... &
          GOSEC_PID=$!

          # Run vulnerability check in background
          govulncheck ./... &
          VULN_PID=$!

          # Run formatting check
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

          # Wait for security checks
          wait $GOSEC_PID $VULN_PID

      - name: Upload SARIF file
        if: always() && hashFiles('gosec.sarif') != ''
        uses: >
          github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498  # v3.29.11
        with:
          sarif_file: gosec.sarif
        continue-on-error: true

      - name: Check Go modules
        run: |
          go mod tidy
          go work sync
          # Only check core module files, allow workspace sum to update
          if ! git diff --quiet go.mod go.sum; then
            echo "go.mod or go.sum needs to be updated"
            git diff go.mod go.sum
            exit 1
          fi
          # Show workspace changes but don't fail
          if ! git diff --quiet go.work.sum; then
            echo "go.work.sum was updated by workspace sync (this is expected)"
            git diff --stat go.work.sum
          fi

      # Build all artifacts in single job (major cost savings)
      - name: Build multi-platform artifacts
        run: |
          mkdir -p artifacts

          # Set build variables
          VERSION=${GITHUB_REF_NAME:-dev}
          COMMIT=${GITHUB_SHA::8}
          BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')
          LDFLAGS="-w -s -X 'main.version=${VERSION}' -X 'main.commit=${COMMIT}' -X 'main.date=${BUILD_DATE}'"

          # Build test binary first
          CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o artifacts/radarr-test ./cmd/radarr

          # Parallel builds for all platforms (much faster than separate jobs)
          echo "Building all platform binaries in parallel..."

          # Linux builds
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-linux-amd64 ./cmd/radarr &
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-linux-arm64 ./cmd/radarr &

          # Darwin builds
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-darwin-amd64 ./cmd/radarr &
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-darwin-arm64 ./cmd/radarr &

          # Windows builds
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-windows-amd64.exe ./cmd/radarr &
          GOOS=windows GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-windows-arm64.exe ./cmd/radarr &

          # FreeBSD builds
          GOOS=freebsd GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-freebsd-amd64 ./cmd/radarr &
          GOOS=freebsd GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-freebsd-arm64 ./cmd/radarr &

          # Wait for all builds to complete
          wait
          echo "All builds completed"
          ls -la artifacts/

      - name: Store build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: build-artifacts
          path: artifacts/
          retention-days: 7
          compression-level: 9

  # Stage 2: PostgreSQL Database Tests
  test-postgres:
    name: Database Tests (postgres)
    runs-on: ubuntu-24.04
    needs: [quality-and-build]
    timeout-minutes: 20

    services:
      postgres:
        image: >
          postgres:17-alpine@sha256:3406990b6e4c7192317b6fdc5680498744f6142f01f0287f4ee0420d8c74063c
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: test_user
          POSTGRES_DB: radarr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      # Reuse enhanced caching from previous job
      - name: Set up Go with enhanced caching
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5  # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Restore Go modules and tools cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: >
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            ${{ env.GO_VERSION }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            go-${{ runner.os }}-

      - name: Download build artifacts
        uses: >
          actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Setup test environment
        run: |
          mkdir -p data movies web/static web/templates
          cp config.ci.postgres.yml data/config.yml

      - name: Run comprehensive tests
        run: |
          # Run all test types in sequence for efficiency
          echo "Running unit tests..."
          go test -v -race -coverprofile=coverage-postgres.out ./...

          echo "Running benchmark tests..."
          go test -bench=. -benchmem ./...

          echo "Running example tests..."
          go test -run=Example ./...
        env:
          RADARR_DATABASE_TYPE: postgres
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 5432
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

      - name: Upload coverage to Codecov
        uses: >
          codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00  # v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-postgres.out
          flags: unittests,postgres
          name: coverage-postgres

      - name: Integration test
        run: |
          # Use Linux amd64 binary for postgres testing
          chmod +x artifacts/radarr-linux-amd64

          # Start application with timeout
          timeout 30s artifacts/radarr-linux-amd64 \
            --data ./data --config ./data/config.yml &
          RADARR_PID=$!
          sleep 10

          # Test core API endpoints
          curl -f http://localhost:7878/ping || exit 1
          curl -f http://localhost:7878/api/v3/system/status || exit 1
          curl -f http://localhost:7878/api/v3/movie || exit 1

          # Cleanup
          kill $RADARR_PID || true
          wait $RADARR_PID || true
        env:
          RADARR_DATABASE_TYPE: postgres
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 5432
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

  # Stage 3: MariaDB Database Tests
  test-mariadb:
    name: Database Tests (mariadb)
    runs-on: ubuntu-24.04
    needs: [quality-and-build]
    timeout-minutes: 20

    services:
      mariadb:
        image: >
          mariadb:12@sha256:b30cc65b57a11a2e791ad5c06284e599fe9f1bf3fe9081a88d85bcf36389be4a
        env:
          MYSQL_ROOT_PASSWORD: test_root_password_123
          MYSQL_DATABASE: radarr_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password_123
        options: >-
          --health-cmd="mariadb-admin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      # Reuse enhanced caching from previous job
      - name: Set up Go with enhanced caching
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5  # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Restore Go modules and tools cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: >
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            ${{ env.GO_VERSION }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum', '**/go.work.sum') }}-
            go-${{ runner.os }}-

      - name: Download build artifacts
        uses: >
          actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Setup test environment
        run: |
          mkdir -p data movies web/static web/templates
          cp config.ci.mariadb.yml data/config.yml

      - name: Run comprehensive tests
        run: |
          # Run all test types in sequence for efficiency
          echo "Running unit tests..."
          go test -v -race -coverprofile=coverage-mariadb.out ./...

          echo "Running benchmark tests..."
          go test -bench=. -benchmem ./...

          echo "Running example tests..."
          go test -run=Example ./...
        env:
          RADARR_DATABASE_TYPE: mariadb
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 3306
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

      - name: Upload coverage to Codecov
        uses: >
          codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00  # v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-mariadb.out
          flags: unittests,mariadb
          name: coverage-mariadb

      - name: Integration test
        run: |
          # Use Linux amd64 binary for mariadb testing
          chmod +x artifacts/radarr-linux-amd64

          # Start application with timeout
          timeout 30s artifacts/radarr-linux-amd64 \
            --data ./data --config ./data/config.yml &
          RADARR_PID=$!
          sleep 10

          # Test core API endpoints
          curl -f http://localhost:7878/ping || exit 1
          curl -f http://localhost:7878/api/v3/system/status || exit 1
          curl -f http://localhost:7878/api/v3/movie || exit 1

          # Cleanup
          kill $RADARR_PID || true
          wait $RADARR_PID || true
        env:
          RADARR_DATABASE_TYPE: mariadb
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 3306
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

  # Stage 4: Streamlined publish (major cost savings)
  publish:
    name: Publish Test Images and Artifacts
    runs-on: ubuntu-24.04
    needs: [test-postgres, test-mariadb]
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 20

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Download build artifacts
        uses: >
          actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Set up Docker Buildx
        uses: >
          docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1

      - name: Log in to Container Registry
        uses: >
          docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: >
          docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=nightly,enable={{is_default_branch}}
            type=raw,value=dev-latest,enable={{is_default_branch}}
            type=raw,value=commit-{{sha}},enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}}-nightly,enable={{is_default_branch}}
            type=raw,value=pr-{{.Number}},enable=${{ github.event_name == 'pull_request' }}

      - name: Build and push Docker image
        uses: >
          docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created || github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: published-artifacts-${{ github.ref_name }}
          path: artifacts/
          retention-days: 30
          compression-level: 9

      - name: Create deployment summary
        run: |
          echo "## 🚀 Optimized CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Consolidated 6 separate test jobs into 2 efficient database tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Eliminated expensive macOS runners (savings: ~80% on runner costs)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Combined quality checks, security, and builds in single job" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel cross-compilation replaces multiple platform-specific jobs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Speed Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced Go module and build caching across jobs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel security checks and tool installation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel cross-compilation of all platform binaries" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Reduced job dependencies and setup overhead" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Available Binaries" >> $GITHUB_STEP_SUMMARY
          ls -la artifacts/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "**Development Build (Latest from main):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Latest nightly build" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Specific commit build" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:commit-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:commit-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "**Pull Request Build:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Available Tags" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- \`:nightly\` - Latest development build" >> $GITHUB_STEP_SUMMARY
            echo "- \`:dev-latest\` - Alias for latest development build" >> $GITHUB_STEP_SUMMARY
            echo "- \`:commit-${{ github.sha }}\` - This specific commit" >> $GITHUB_STEP_SUMMARY
            echo "- \`:$(date +%Y.%m.%d)-nightly\` - Dated nightly build" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- \`:pr-${{ github.event.number }}\` - Pull request build" >> $GITHUB_STEP_SUMMARY
          fi

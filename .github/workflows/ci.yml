---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # renovate: datasource=golang-version depName=golang
  GO_VERSION: '1.25.3'
  # renovate: datasource=node-version depName=node
  NODE_VERSION: '22.21.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quality checks and build (optimized for cost and speed)
  quality-and-build:
    name: Quality & Build
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Go with enhanced caching
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Set up Node.js for linting tools
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'


      # Cache linting tools across installation paths
      - name: Cache linting tools
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/go/bin
            ~/.local/bin
            ~/.npm/_global
          key: lint-tools-${{ runner.os }}-${{ hashFiles('.golangci.yml', 'package*.json') }}
          restore-keys: |
            lint-tools-${{ runner.os }}-

      - name: Install dependencies and tools (optimized)
        run: |
          # Download Go dependencies (cached)
          go mod download
          go work sync

          # Install frontend dependencies if frontend exists (required for ESLint)
          if [ -d "web/frontend" ] && [ -f "web/frontend/package.json" ]; then
            echo "Installing frontend dependencies for ESLint..."
            cd web/frontend && npm ci --only=dev && cd ../..
          fi

          # Install security tools in parallel (background)
          echo "Installing security tools in parallel..."
          go install github.com/securego/gosec/v2/cmd/gosec@latest &
          GOSEC_PID=$!
          go install golang.org/x/vuln/cmd/govulncheck@latest &
          VULN_PID=$!

          # Install linting tools optimized for CI (parallel, cache-aware)
          echo "Installing optimized CI linting tools..."
          make setup-lint-tools-ci &
          LINT_PID=$!

          # Wait for all installations to complete
          echo "Waiting for all tool installations..."
          wait $GOSEC_PID $VULN_PID $LINT_PID
          echo "All tool installations completed"

      - name: Validate linting tools installation
        run: |
          echo "Validating linting tools installation..."
          make check-lint-tools
          echo "‚úÖ Linting tools validation completed"

      # Fast parallel linting optimized for CI performance
      - name: Run fast parallel linting (optimized)
        run: |
          echo "üöÄ Running optimized fast parallel linting for CI..."
          # Use our new CI-optimized fast linting target
          make lint-ci-fast
          echo "‚úÖ Critical linting completed successfully"

      - name: Run comprehensive linting validation (optional)
        continue-on-error: true
        run: |
          echo "üîç Running comprehensive linting validation (non-blocking)..."
          # Run additional checks that may have warnings but shouldn't fail CI
          make lint-yaml || echo "‚ö†Ô∏è  YAML linting issues found (non-blocking)"
          make lint-json || echo "‚ö†Ô∏è  JSON linting issues found (non-blocking)"
          make lint-markdown || echo "‚ö†Ô∏è  Markdown linting issues found (non-blocking)"
          make lint-shell || echo "‚ö†Ô∏è  Shell script linting issues found (non-blocking)"
          echo "üìã Comprehensive validation completed"

      - name: Generate linting summary
        if: always()
        run: |
          echo "## üîç Comprehensive Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Critical Linting (Must Pass)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Go code linting (golangci-lint)" >> $GITHUB_STEP_SUMMARY
          if [ -d "web/frontend" ] && [ -f "web/frontend/package.json" ]; then
            echo "- ‚úÖ Frontend TypeScript/React linting (ESLint)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚è≠Ô∏è Frontend linting skipped (no frontend detected)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Additional Linting (Warnings Only)" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ YAML files (yamllint)" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ JSON files (jsonlint/python)" >> $GITHUB_STEP_SUMMARY
          echo "- üìù Markdown files (markdownlint)" >> $GITHUB_STEP_SUMMARY
          echo "- üêö Shell scripts (shellcheck)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üõ†Ô∏è Available Linting Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Run all linting" >> $GITHUB_STEP_SUMMARY
          echo "make lint-all" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run specific linting" >> $GITHUB_STEP_SUMMARY
          echo "make lint-go lint-frontend lint-yaml lint-json lint-markdown lint-shell" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Auto-fix linting issues" >> $GITHUB_STEP_SUMMARY
          echo "make lint-fix" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Run security checks in parallel
        run: |
          # Run security checks in background
          gosec -fmt sarif -out gosec.sarif ./... &
          GOSEC_PID=$!

          # Run vulnerability check in background
          govulncheck ./... &
          VULN_PID=$!

          # Formatting check is now handled by lint-go target

          # Wait for security checks
          wait $GOSEC_PID $VULN_PID

      - name: Upload SARIF file
        if: always() && hashFiles('gosec.sarif') != ''
        uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v4.31.0
        with:
          sarif_file: gosec.sarif
        continue-on-error: true

      - name: Check Go modules
        run: |
          go mod tidy
          go work sync
          # Only check core module files, allow workspace sum to update
          if ! git diff --quiet go.mod go.sum; then
            echo "go.mod or go.sum needs to be updated"
            git diff go.mod go.sum
            exit 1
          fi
          # Show workspace changes but don't fail
          if ! git diff --quiet go.work.sum; then
            echo "go.work.sum was updated by workspace sync (this is expected)"
            git diff --stat go.work.sum
          fi

      # Build all artifacts in single job (major cost savings)
      - name: Build multi-platform artifacts
        run: |
          mkdir -p artifacts

          # Set build variables
          VERSION=${GITHUB_REF_NAME:-dev}
          COMMIT=${GITHUB_SHA::8}
          BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')
          LDFLAGS="-w -s -X 'main.version=${VERSION}' -X 'main.commit=${COMMIT}' -X 'main.date=${BUILD_DATE}'"

          # Build test binary first
          CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o artifacts/radarr-test ./cmd/radarr

          # Parallel builds for all platforms (much faster than separate jobs)
          echo "Building all platform binaries in parallel..."

          # Linux builds
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-linux-amd64 ./cmd/radarr &
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-linux-arm64 ./cmd/radarr &

          # Darwin builds
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-darwin-amd64 ./cmd/radarr &
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-darwin-arm64 ./cmd/radarr &

          # Windows builds
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-windows-amd64.exe ./cmd/radarr &
          GOOS=windows GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-windows-arm64.exe ./cmd/radarr &

          # FreeBSD builds
          GOOS=freebsd GOARCH=amd64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-freebsd-amd64 ./cmd/radarr &
          GOOS=freebsd GOARCH=arm64 CGO_ENABLED=0 \
            go build -ldflags="${LDFLAGS}" -o artifacts/radarr-freebsd-arm64 ./cmd/radarr &

          # Wait for all builds to complete
          wait
          echo "All builds completed"
          ls -la artifacts/

      - name: Validate build version handling
        run: |
          echo "üîç Validating build version injection system..."

          # Use build version validation script
          chmod +x ./.github/scripts/validate-build-version.sh
          ./.github/scripts/validate-build-version.sh artifacts/radarr-test

          echo "‚úÖ Build version validation completed"

      - name: Store build artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: build-artifacts
          path: artifacts/
          retention-days: 7
          compression-level: 9

  # Stage 2: PostgreSQL Database Tests
  test-postgres:
    name: Database Tests (postgres)
    runs-on: ubuntu-24.04
    needs: [quality-and-build]
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:18.0-alpine@sha256:48c8ad3a7284b82be4482a52076d47d879fd6fb084a1cbfccbd551f9331b0e40
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: test_user
          POSTGRES_DB: radarr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Reuse enhanced caching from previous job
      - name: Set up Go with enhanced caching
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Download build artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Setup test environment
        run: |
          mkdir -p data movies web/static web/templates
          cp config.ci.postgres.yml data/config.yml

      - name: Run comprehensive tests
        run: |
          # Run all test types in sequence for efficiency
          echo "Running unit tests..."
          go test -v -race -coverprofile=coverage-postgres.out ./...

          echo "Running benchmark tests..."
          go test -bench=. -benchmem ./...

          echo "Running example tests..."
          go test -run=Example ./...
        env:
          RADARR_DATABASE_TYPE: postgres
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 5432
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-postgres.out
          flags: unittests,postgres
          name: coverage-postgres

      - name: Integration test
        run: |
          # Use Linux amd64 binary for postgres testing
          chmod +x artifacts/radarr-linux-amd64

          # Start application with timeout
          timeout 30s artifacts/radarr-linux-amd64 \
            --data ./data --config ./data/config.yml &
          RADARR_PID=$!
          sleep 10

          # Test core API endpoints
          curl -f http://localhost:7878/ping || exit 1
          curl -f http://localhost:7878/api/v3/system/status || exit 1
          curl -f http://localhost:7878/api/v3/movie || exit 1

          # Cleanup
          kill $RADARR_PID || true
          wait $RADARR_PID || true
        env:
          RADARR_DATABASE_TYPE: postgres
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 5432
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

  # Stage 3: MariaDB Database Tests
  test-mariadb:
    name: Database Tests (mariadb)
    runs-on: ubuntu-24.04
    needs: [quality-and-build]
    timeout-minutes: 20

    services:
      mariadb:
        image: mariadb:12.0.2@sha256:5b6a1eac15b85b981a61afb89aea2a22bf76b5f58809d05f0bcc13ab6ec44cb8
        env:
          MYSQL_ROOT_PASSWORD: test_root_password_123
          MYSQL_DATABASE: radarr_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password_123
        options: >-
          --health-cmd="mariadb-admin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Reuse enhanced caching from previous job
      - name: Set up Go with enhanced caching
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Download build artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Setup test environment
        run: |
          mkdir -p data movies web/static web/templates
          cp config.ci.mariadb.yml data/config.yml

      - name: Run comprehensive tests
        run: |
          # Run all test types in sequence for efficiency
          echo "Running unit tests..."
          go test -v -race -coverprofile=coverage-mariadb.out ./...

          echo "Running benchmark tests..."
          go test -bench=. -benchmem ./...

          echo "Running example tests..."
          go test -run=Example ./...
        env:
          RADARR_DATABASE_TYPE: mariadb
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 3306
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-mariadb.out
          flags: unittests,mariadb
          name: coverage-mariadb

      - name: Integration test
        run: |
          # Use Linux amd64 binary for mariadb testing
          chmod +x artifacts/radarr-linux-amd64

          # Start application with timeout
          timeout 30s artifacts/radarr-linux-amd64 \
            --data ./data --config ./data/config.yml &
          RADARR_PID=$!
          sleep 10

          # Test core API endpoints
          curl -f http://localhost:7878/ping || exit 1
          curl -f http://localhost:7878/api/v3/system/status || exit 1
          curl -f http://localhost:7878/api/v3/movie || exit 1

          # Cleanup
          kill $RADARR_PID || true
          wait $RADARR_PID || true
        env:
          RADARR_DATABASE_TYPE: mariadb
          RADARR_DATABASE_HOST: localhost
          RADARR_DATABASE_PORT: 3306
          RADARR_DATABASE_DATABASE: radarr_test
          RADARR_DATABASE_USERNAME: test_user
          RADARR_DATABASE_PASSWORD: test_password_123

  # Stage 4: Streamlined publish (major cost savings)
  publish:
    name: Publish Test Images and Artifacts
    runs-on: ubuntu-24.04
    needs: [test-postgres, test-mariadb]
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 20

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=nightly,enable={{is_default_branch}}
            type=raw,value=dev-latest,enable={{is_default_branch}}
            type=raw,value=commit-{{sha}},enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}}-nightly,enable={{is_default_branch}}
            type=raw,value=pr-{{.Number}},enable=${{ github.event_name == 'pull_request' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile.artifacts
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created || github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: published-artifacts-${{ github.ref_name }}
          path: artifacts/
          retention-days: 30
          compression-level: 9

      - name: Create deployment summary
        run: |
          echo "## üöÄ Optimized CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Consolidated 6 separate test jobs into 2 efficient database tests" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Eliminated expensive macOS runners (savings: ~80% on runner costs)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Combined quality checks, security, and builds in single job" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Parallel cross-compilation replaces multiple platform-specific jobs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö° Speed Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Enhanced Go module and build caching across jobs" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Parallel security checks and tool installation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Parallel cross-compilation of all platform binaries" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Reduced job dependencies and setup overhead" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Published Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Available Binaries" >> $GITHUB_STEP_SUMMARY
          ls -la artifacts/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üê≥ Docker Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "**Development Build (Latest from main):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Latest nightly build" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Specific commit build" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:commit-${{ github.sha }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:commit-${{ github.sha }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "**Pull Request Build:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> \
              $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè∑Ô∏è Available Tags" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- \`:nightly\` - Latest development build" >> $GITHUB_STEP_SUMMARY
            echo "- \`:dev-latest\` - Alias for latest development build" >> $GITHUB_STEP_SUMMARY
            echo "- \`:commit-${{ github.sha }}\` - This specific commit" >> $GITHUB_STEP_SUMMARY
            echo "- \`:$(date +%Y.%m.%d)-nightly\` - Dated nightly build" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- \`:pr-${{ github.event.number }}\` - Pull request build" >> $GITHUB_STEP_SUMMARY
          fi

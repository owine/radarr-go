name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1a: Lint (runs concurrently with security)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Check Go modules
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "go.mod or go.sum needs to be updated"
          git diff go.mod go.sum
          exit 1
        fi

  # Stage 1b: Security (runs concurrently with lint)
  security:
    name: Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install Gosec Security Scanner
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif ./...
      continue-on-error: true

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 # v3
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

    - name: Run Gosec (console output)
      run: gosec ./...
      continue-on-error: true

    - name: Install and run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true

  # Stage 2: Build (runs after lint and security complete successfully)
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [lint, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build multi-platform artifacts
      run: |
        mkdir -p artifacts
        
        # Build for current platform with CGO (test artifact) 
        CGO_ENABLED=1 go build -ldflags="-w -s" -o artifacts/radarr-test ./cmd/radarr
        
        # Build for all supported platforms
        # Linux (native platform - use CGO for SQLite)
        GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -ldflags="-w -s" -o artifacts/radarr-linux-amd64 ./cmd/radarr
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o artifacts/radarr-linux-arm64 ./cmd/radarr
        
        # Darwin (macOS) - disable CGO for cross-compilation
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o artifacts/radarr-darwin-amd64 ./cmd/radarr
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o artifacts/radarr-darwin-arm64 ./cmd/radarr
        
        # FreeBSD - disable CGO for cross-compilation
        GOOS=freebsd GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o artifacts/radarr-freebsd-amd64 ./cmd/radarr
        GOOS=freebsd GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o artifacts/radarr-freebsd-arm64 ./cmd/radarr

    - name: Store build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: build-artifacts
        path: artifacts/
        retention-days: 7

  # Stage 3a: Test SQLite (runs after build completes successfully)
  test-sqlite:
    name: Test SQLite (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: [build]
    
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Create test directories
      run: |
        mkdir -p data movies web/static web/templates
        cp config.yaml data/

    - name: Run tests (SQLite)
      run: |
        go test -v -race -coverprofile=coverage-${{ matrix.os }}-${{ matrix.arch }}-sqlite.out ./...
      env:
        RADARR_DATABASE_TYPE: sqlite
        RADARR_DATABASE_CONNECTION_URL: ./data/radarr_test.db

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
      with:
        files: ./coverage-${{ matrix.os }}-${{ matrix.arch }}-sqlite.out
        flags: unittests,sqlite,${{ matrix.os }}-${{ matrix.arch }}
        name: coverage-${{ matrix.os }}-${{ matrix.arch }}-sqlite

    - name: Integration test
      run: |
        # Use the appropriate binary for the current architecture
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          BINARY="artifacts/radarr-${{ matrix.os }}-amd64"
        else
          # For ARM64, we'll use the test binary since we can't run ARM64 on AMD64 runners
          BINARY="artifacts/radarr-test"
        fi
        
        chmod +x "$BINARY"
        timeout 30s "$BINARY" --data ./data &
        RADARR_PID=$!
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:7878/ping || exit 1
        curl -f http://localhost:7878/api/v3/system/status || exit 1
        curl -f http://localhost:7878/api/v3/movie || exit 1
        
        kill $RADARR_PID || true
        wait $RADARR_PID || true

  # Stage 3b: Test PostgreSQL (runs after build completes successfully)
  test-postgres:
    name: Test PostgreSQL (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: [build]
    
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: test_user
          POSTGRES_DB: radarr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Create test directories
      run: |
        mkdir -p data movies web/static web/templates
        cp config.yaml data/

    - name: Run tests (PostgreSQL)
      run: |
        go test -v -race -coverprofile=coverage-${{ matrix.os }}-${{ matrix.arch }}-postgres.out ./...
      env:
        RADARR_DATABASE_TYPE: postgres
        RADARR_DATABASE_HOST: localhost
        RADARR_DATABASE_PORT: 5432
        RADARR_DATABASE_DATABASE: radarr_test
        RADARR_DATABASE_USERNAME: test_user
        RADARR_DATABASE_PASSWORD: test_password_123

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
      with:
        files: ./coverage-${{ matrix.os }}-${{ matrix.arch }}-postgres.out
        flags: unittests,postgres,${{ matrix.os }}-${{ matrix.arch }}
        name: coverage-${{ matrix.os }}-${{ matrix.arch }}-postgres

  # Stage 4: Publish (runs after all tests complete successfully)
  publish:
    name: Publish Test Images and Artifacts
    runs-on: ubuntu-latest
    needs: [test-sqlite, test-postgres]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

    - name: Log in to Container Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push test Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created || github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Publish test artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: published-artifacts-${{ github.ref_name }}
        path: artifacts/
        retention-days: 30

    - name: Create deployment summary
      run: |
        echo "## 🚀 Test Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Images**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Available Binaries" >> $GITHUB_STEP_SUMMARY
        ls -la artifacts/ >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 7878:7878 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
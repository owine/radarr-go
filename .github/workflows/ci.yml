name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  # Phase 1: Quick checks (run concurrently)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Check Go modules
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "go.mod or go.sum needs to be updated"
          git diff go.mod go.sum
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install Gosec Security Scanner
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif ./...
      continue-on-error: true

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 # v3
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

    - name: Run Gosec (console output)
      run: gosec ./...
      continue-on-error: true

    - name: Install and run govulncheck vulnerability scanner
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true

  # Phase 2: Tests (runs after lint and security pass)
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint, security]
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: test_user
          POSTGRES_DB: radarr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        database: [sqlite, postgres]

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Create test directories
      run: |
        mkdir -p data movies web/static web/templates
        cp config.yaml data/

    - name: Run tests (SQLite)
      if: matrix.database == 'sqlite'
      run: |
        go test -v -race -coverprofile=coverage.out ./...
      env:
        RADARR_DATABASE_TYPE: sqlite
        RADARR_DATABASE_CONNECTION_URL: ./data/radarr_test.db

    - name: Run tests (PostgreSQL)
      if: matrix.database == 'postgres'
      run: |
        go test -v -race -coverprofile=coverage-postgres.out ./...
      env:
        RADARR_DATABASE_TYPE: postgres
        RADARR_DATABASE_HOST: localhost
        RADARR_DATABASE_PORT: 5432
        RADARR_DATABASE_DATABASE: radarr_test
        RADARR_DATABASE_USERNAME: test_user
        RADARR_DATABASE_PASSWORD: test_password_123

    - name: Upload coverage to Codecov
      if: matrix.database == 'sqlite'
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Phase 3: Build (runs after tests pass)
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      run: |
        mkdir -p dist
        BINARY_NAME="radarr-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
        go build -ldflags="-w -s" -o "dist/${BINARY_NAME}" ./cmd/radarr
      env:
        CGO_ENABLED: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: radarr-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 7

  # Phase 3: Docker Build (runs concurrently with binary builds)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      with:
        images: radarr/radarr-go
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Phase 4: Integration Tests (runs after builds complete)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: test_user
          POSTGRES_DB: radarr_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: radarr-linux-amd64
        path: ./

    - name: Make binary executable
      run: chmod +x radarr-linux-amd64

    - name: Create test directories
      run: |
        mkdir -p data movies web/static web/templates
        cp config.yaml data/

    - name: Test binary startup (SQLite)
      run: |
        timeout 30s ./radarr-linux-amd64 --data ./data &
        RADARR_PID=$!
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:7878/ping || exit 1
        curl -f http://localhost:7878/api/v3/system/status || exit 1
        curl -f http://localhost:7878/api/v3/movie || exit 1
        
        kill $RADARR_PID || true
        wait $RADARR_PID || true

    - name: Test binary startup (PostgreSQL)
      run: |
        export RADARR_DATABASE_TYPE=postgres
        export RADARR_DATABASE_HOST=localhost
        export RADARR_DATABASE_PORT=5432
        export RADARR_DATABASE_DATABASE=radarr_integration
        export RADARR_DATABASE_USERNAME=test_user
        export RADARR_DATABASE_PASSWORD=test_password_123
        
        timeout 30s ./radarr-linux-amd64 --data ./data &
        RADARR_PID=$!
        sleep 15
        
        # Test API endpoints
        curl -f http://localhost:7878/ping || exit 1
        curl -f http://localhost:7878/api/v3/system/status || exit 1
        curl -f http://localhost:7878/api/v3/movie || exit 1
        
        kill $RADARR_PID || true
        wait $RADARR_PID || true

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: integration-test-logs
        path: |
          data/*.log
          *.log
        retention-days: 3
        if-no-files-found: ignore
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package mysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countMonitoredMoviesStmt, err = db.PrepareContext(ctx, countMonitoredMovies); err != nil {
		return nil, fmt.Errorf("error preparing query CountMonitoredMovies: %w", err)
	}
	if q.countMoviesStmt, err = db.PrepareContext(ctx, countMovies); err != nil {
		return nil, fmt.Errorf("error preparing query CountMovies: %w", err)
	}
	if q.countQualityProfilesStmt, err = db.PrepareContext(ctx, countQualityProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query CountQualityProfiles: %w", err)
	}
	if q.createMovieStmt, err = db.PrepareContext(ctx, createMovie); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMovie: %w", err)
	}
	if q.createQualityProfileStmt, err = db.PrepareContext(ctx, createQualityProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQualityProfile: %w", err)
	}
	if q.deleteMovieStmt, err = db.PrepareContext(ctx, deleteMovie); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMovie: %w", err)
	}
	if q.deleteQualityProfileStmt, err = db.PrepareContext(ctx, deleteQualityProfile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQualityProfile: %w", err)
	}
	if q.getAllMoviesStmt, err = db.PrepareContext(ctx, getAllMovies); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMovies: %w", err)
	}
	if q.getAllQualityProfilesStmt, err = db.PrepareContext(ctx, getAllQualityProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllQualityProfiles: %w", err)
	}
	if q.getMonitoredMoviesStmt, err = db.PrepareContext(ctx, getMonitoredMovies); err != nil {
		return nil, fmt.Errorf("error preparing query GetMonitoredMovies: %w", err)
	}
	if q.getMovieByIDStmt, err = db.PrepareContext(ctx, getMovieByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMovieByID: %w", err)
	}
	if q.getMoviesByQualityProfileStmt, err = db.PrepareContext(ctx, getMoviesByQualityProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetMoviesByQualityProfile: %w", err)
	}
	if q.getMoviesWithFilesStmt, err = db.PrepareContext(ctx, getMoviesWithFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetMoviesWithFiles: %w", err)
	}
	if q.getQualityProfileByIDStmt, err = db.PrepareContext(ctx, getQualityProfileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetQualityProfileByID: %w", err)
	}
	if q.updateMovieStmt, err = db.PrepareContext(ctx, updateMovie); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMovie: %w", err)
	}
	if q.updateQualityProfileStmt, err = db.PrepareContext(ctx, updateQualityProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQualityProfile: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countMonitoredMoviesStmt != nil {
		if cerr := q.countMonitoredMoviesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMonitoredMoviesStmt: %w", cerr)
		}
	}
	if q.countMoviesStmt != nil {
		if cerr := q.countMoviesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMoviesStmt: %w", cerr)
		}
	}
	if q.countQualityProfilesStmt != nil {
		if cerr := q.countQualityProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countQualityProfilesStmt: %w", cerr)
		}
	}
	if q.createMovieStmt != nil {
		if cerr := q.createMovieStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMovieStmt: %w", cerr)
		}
	}
	if q.createQualityProfileStmt != nil {
		if cerr := q.createQualityProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQualityProfileStmt: %w", cerr)
		}
	}
	if q.deleteMovieStmt != nil {
		if cerr := q.deleteMovieStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMovieStmt: %w", cerr)
		}
	}
	if q.deleteQualityProfileStmt != nil {
		if cerr := q.deleteQualityProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQualityProfileStmt: %w", cerr)
		}
	}
	if q.getAllMoviesStmt != nil {
		if cerr := q.getAllMoviesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMoviesStmt: %w", cerr)
		}
	}
	if q.getAllQualityProfilesStmt != nil {
		if cerr := q.getAllQualityProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllQualityProfilesStmt: %w", cerr)
		}
	}
	if q.getMonitoredMoviesStmt != nil {
		if cerr := q.getMonitoredMoviesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMonitoredMoviesStmt: %w", cerr)
		}
	}
	if q.getMovieByIDStmt != nil {
		if cerr := q.getMovieByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMovieByIDStmt: %w", cerr)
		}
	}
	if q.getMoviesByQualityProfileStmt != nil {
		if cerr := q.getMoviesByQualityProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMoviesByQualityProfileStmt: %w", cerr)
		}
	}
	if q.getMoviesWithFilesStmt != nil {
		if cerr := q.getMoviesWithFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMoviesWithFilesStmt: %w", cerr)
		}
	}
	if q.getQualityProfileByIDStmt != nil {
		if cerr := q.getQualityProfileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQualityProfileByIDStmt: %w", cerr)
		}
	}
	if q.updateMovieStmt != nil {
		if cerr := q.updateMovieStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMovieStmt: %w", cerr)
		}
	}
	if q.updateQualityProfileStmt != nil {
		if cerr := q.updateQualityProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQualityProfileStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	countMonitoredMoviesStmt      *sql.Stmt
	countMoviesStmt               *sql.Stmt
	countQualityProfilesStmt      *sql.Stmt
	createMovieStmt               *sql.Stmt
	createQualityProfileStmt      *sql.Stmt
	deleteMovieStmt               *sql.Stmt
	deleteQualityProfileStmt      *sql.Stmt
	getAllMoviesStmt              *sql.Stmt
	getAllQualityProfilesStmt     *sql.Stmt
	getMonitoredMoviesStmt        *sql.Stmt
	getMovieByIDStmt              *sql.Stmt
	getMoviesByQualityProfileStmt *sql.Stmt
	getMoviesWithFilesStmt        *sql.Stmt
	getQualityProfileByIDStmt     *sql.Stmt
	updateMovieStmt               *sql.Stmt
	updateQualityProfileStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		countMonitoredMoviesStmt:      q.countMonitoredMoviesStmt,
		countMoviesStmt:               q.countMoviesStmt,
		countQualityProfilesStmt:      q.countQualityProfilesStmt,
		createMovieStmt:               q.createMovieStmt,
		createQualityProfileStmt:      q.createQualityProfileStmt,
		deleteMovieStmt:               q.deleteMovieStmt,
		deleteQualityProfileStmt:      q.deleteQualityProfileStmt,
		getAllMoviesStmt:              q.getAllMoviesStmt,
		getAllQualityProfilesStmt:     q.getAllQualityProfilesStmt,
		getMonitoredMoviesStmt:        q.getMonitoredMoviesStmt,
		getMovieByIDStmt:              q.getMovieByIDStmt,
		getMoviesByQualityProfileStmt: q.getMoviesByQualityProfileStmt,
		getMoviesWithFilesStmt:        q.getMoviesWithFilesStmt,
		getQualityProfileByIDStmt:     q.getQualityProfileByIDStmt,
		updateMovieStmt:               q.updateMovieStmt,
		updateQualityProfileStmt:      q.updateQualityProfileStmt,
	}
}

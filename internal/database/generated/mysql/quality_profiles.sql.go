// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quality_profiles.sql

package mysql

import (
	"context"
	"database/sql"
)

const countQualityProfiles = `-- name: CountQualityProfiles :one
SELECT COUNT(*) FROM quality_profiles
`

func (q *Queries) CountQualityProfiles(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countQualityProfilesStmt, countQualityProfiles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQualityProfile = `-- name: CreateQualityProfile :execresult
INSERT INTO quality_profiles (name, cutoff, items, created_at, updated_at)
VALUES (?, ?, ?, NOW(), NOW())
`

type CreateQualityProfileParams struct {
	Name   string `db:"name" json:"name"`
	Cutoff int32  `db:"cutoff" json:"cutoff"`
	Items  string `db:"items" json:"items"`
}

func (q *Queries) CreateQualityProfile(ctx context.Context, arg CreateQualityProfileParams) (sql.Result, error) {
	return q.exec(ctx, q.createQualityProfileStmt, createQualityProfile, arg.Name, arg.Cutoff, arg.Items)
}

const deleteQualityProfile = `-- name: DeleteQualityProfile :exec
DELETE FROM quality_profiles WHERE id = ?
`

func (q *Queries) DeleteQualityProfile(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteQualityProfileStmt, deleteQualityProfile, id)
	return err
}

const getAllQualityProfiles = `-- name: GetAllQualityProfiles :many
SELECT id, name, cutoff, items, created_at, updated_at
FROM quality_profiles
ORDER BY name
`

func (q *Queries) GetAllQualityProfiles(ctx context.Context) ([]QualityProfiles, error) {
	rows, err := q.query(ctx, q.getAllQualityProfilesStmt, getAllQualityProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QualityProfiles{}
	for rows.Next() {
		var i QualityProfiles
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cutoff,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQualityProfileByID = `-- name: GetQualityProfileByID :one
SELECT id, name, cutoff, items, created_at, updated_at
FROM quality_profiles
WHERE id = ?
`

func (q *Queries) GetQualityProfileByID(ctx context.Context, id int32) (QualityProfiles, error) {
	row := q.queryRow(ctx, q.getQualityProfileByIDStmt, getQualityProfileByID, id)
	var i QualityProfiles
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cutoff,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQualityProfile = `-- name: UpdateQualityProfile :exec
UPDATE quality_profiles SET
    name = ?,
    cutoff = ?,
    items = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateQualityProfileParams struct {
	Name   string `db:"name" json:"name"`
	Cutoff int32  `db:"cutoff" json:"cutoff"`
	Items  string `db:"items" json:"items"`
	ID     int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateQualityProfile(ctx context.Context, arg UpdateQualityProfileParams) error {
	_, err := q.exec(ctx, q.updateQualityProfileStmt, updateQualityProfile,
		arg.Name,
		arg.Cutoff,
		arg.Items,
		arg.ID,
	)
	return err
}

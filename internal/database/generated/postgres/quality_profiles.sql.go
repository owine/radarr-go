// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quality_profiles.sql

package postgres

import (
	"context"
	"time"
)

const countQualityProfiles = `-- name: CountQualityProfiles :one
SELECT COUNT(*) FROM quality_profiles
`

func (q *Queries) CountQualityProfiles(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countQualityProfiles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQualityProfile = `-- name: CreateQualityProfile :one
INSERT INTO quality_profiles (name, cutoff, items, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id
`

type CreateQualityProfileParams struct {
	Name   string `db:"name" json:"name"`
	Cutoff int32  `db:"cutoff" json:"cutoff"`
	Items  string `db:"items" json:"items"`
}

func (q *Queries) CreateQualityProfile(ctx context.Context, arg CreateQualityProfileParams) (int32, error) {
	row := q.db.QueryRow(ctx, createQualityProfile, arg.Name, arg.Cutoff, arg.Items)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteQualityProfile = `-- name: DeleteQualityProfile :exec
DELETE FROM quality_profiles WHERE id = $1
`

func (q *Queries) DeleteQualityProfile(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteQualityProfile, id)
	return err
}

const getAllQualityProfiles = `-- name: GetAllQualityProfiles :many
SELECT id, name, cutoff, items, created_at, updated_at
FROM quality_profiles
ORDER BY name
`

type GetAllQualityProfilesRow struct {
	ID        int32     `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	Cutoff    int32     `db:"cutoff" json:"cutoff"`
	Items     string    `db:"items" json:"items"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetAllQualityProfiles(ctx context.Context) ([]GetAllQualityProfilesRow, error) {
	rows, err := q.db.Query(ctx, getAllQualityProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllQualityProfilesRow{}
	for rows.Next() {
		var i GetAllQualityProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cutoff,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQualityProfileByID = `-- name: GetQualityProfileByID :one
SELECT id, name, cutoff, items, created_at, updated_at
FROM quality_profiles
WHERE id = $1
`

type GetQualityProfileByIDRow struct {
	ID        int32     `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	Cutoff    int32     `db:"cutoff" json:"cutoff"`
	Items     string    `db:"items" json:"items"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetQualityProfileByID(ctx context.Context, id int32) (GetQualityProfileByIDRow, error) {
	row := q.db.QueryRow(ctx, getQualityProfileByID, id)
	var i GetQualityProfileByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cutoff,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQualityProfile = `-- name: UpdateQualityProfile :exec
UPDATE quality_profiles SET
    name = $2,
    cutoff = $3,
    items = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateQualityProfileParams struct {
	ID     int32  `db:"id" json:"id"`
	Name   string `db:"name" json:"name"`
	Cutoff int32  `db:"cutoff" json:"cutoff"`
	Items  string `db:"items" json:"items"`
}

func (q *Queries) UpdateQualityProfile(ctx context.Context, arg UpdateQualityProfileParams) error {
	_, err := q.db.Exec(ctx, updateQualityProfile,
		arg.ID,
		arg.Name,
		arg.Cutoff,
		arg.Items,
	)
	return err
}
